/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package vista;

import controlador.CategoriaJpaController;
import controlador.ProductoJpaController;
import controlador.ProveedorJpaController;
import controlador.UsuarioJpaController;
import static java.awt.image.ImageObserver.HEIGHT;
import java.text.DecimalFormat;
import java.util.ArrayList;
import java.util.List;
import java.util.StringTokenizer;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.Icon;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import modelo.Categoria;
import modelo.Producto;
import modelo.Proveedor;
import modelo.Usuario;
import templates.colorTablas;
import templates.vistaTemplate;

/**
 *
 * @author Familia
 */
public class VistaProductos extends javax.swing.JDialog {

    public Usuario logueado;
    public ProductoJpaController productoControlador = new ProductoJpaController();
    public CategoriaJpaController categoriaControlador = new CategoriaJpaController();
    public UsuarioJpaController usuarioControlador = new UsuarioJpaController();
    public List<Producto> listaProducto;
    public List<Categoria> listaCategoria;
    public Producto productoSelecionado;
    public List<Proveedor> listaProveedores = new ArrayList<>();
    public ProveedorJpaController proveedorControlador = new ProveedorJpaController();
    Icon iconoMostrar;
    public vistaTemplate vistaImg = new vistaTemplate();
    //Pintar las tablas
    colorTablas colorFila = new colorTablas();
    
    public VistaProductos(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();      
        listaProducto = productoControlador.findProductoEntities();
        llenarTablaProductos();
        llenarTablaProveedor();
        this.setTitle("VENTANA PRODUCTOS");
        this.setLocationRelativeTo(VistaProductos.this);//para que aparezca centrado
        this.setResizable(false);//para que no se modifique el tama√±o del frame
        //Pintar las tablas
        colorFila.columna = 6;
        tablaProductos.setDefaultRenderer(tablaProductos.getColumnClass(6), colorFila);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tablaProductos = new javax.swing.JTable();
        btnCrear = new javax.swing.JButton();
        btnActualizar = new javax.swing.JButton();
        btnEliminar = new javax.swing.JButton();
        btnLimpiar = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        txtNombre = new javax.swing.JTextField();
        txtStock = new javax.swing.JTextField();
        txtPrecioCosto = new javax.swing.JTextField();
        txtPrecioVenta = new javax.swing.JTextField();
        jComboBoxCategoria = new javax.swing.JComboBox<>();
        jScrollPane2 = new javax.swing.JScrollPane();
        tablaProveedores = new javax.swing.JTable();
        btnBuscar = new javax.swing.JButton();
        jComboBoxNivel = new javax.swing.JComboBox<>();
        jComboBoxEstanteria = new javax.swing.JComboBox<>();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        txtPorcentaje = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        txtCodigo = new javax.swing.JTextField();
        jScrollPane3 = new javax.swing.JScrollPane();
        txtObservaciones = new javax.swing.JTextArea();
        jLabel11 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(51, 102, 255));

        tablaProductos.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                tablaProductosMousePressed(evt);
            }
        });
        jScrollPane1.setViewportView(tablaProductos);

        btnCrear.setFont(new java.awt.Font("Tw Cen MT Condensed Extra Bold", 1, 10)); // NOI18N
        btnCrear.setText("CREAR");
        btnCrear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCrearActionPerformed(evt);
            }
        });

        btnActualizar.setFont(new java.awt.Font("Tw Cen MT Condensed Extra Bold", 1, 10)); // NOI18N
        btnActualizar.setText("ACTUALIZAR");
        btnActualizar.setEnabled(false);
        btnActualizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnActualizarActionPerformed(evt);
            }
        });

        btnEliminar.setFont(new java.awt.Font("Tw Cen MT Condensed Extra Bold", 1, 10)); // NOI18N
        btnEliminar.setText("ELIMINAR");
        btnEliminar.setEnabled(false);
        btnEliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEliminarActionPerformed(evt);
            }
        });

        btnLimpiar.setFont(new java.awt.Font("Tw Cen MT Condensed Extra Bold", 1, 10)); // NOI18N
        btnLimpiar.setText("LIMPIAR");
        btnLimpiar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLimpiarActionPerformed(evt);
            }
        });

        jPanel4.setBackground(new java.awt.Color(255, 51, 51));

        jLabel2.setBackground(new java.awt.Color(0, 0, 0));
        jLabel2.setFont(new java.awt.Font("Tw Cen MT Condensed Extra Bold", 1, 24)); // NOI18N
        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/producto.png"))); // NOI18N
        jLabel2.setText("PRODUCTOS");
        jLabel2.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 224, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(10, 10, 10))
        );

        jLabel1.setFont(new java.awt.Font("Tw Cen MT Condensed Extra Bold", 1, 16)); // NOI18N
        jLabel1.setText("Nombre:");

        jLabel3.setFont(new java.awt.Font("Tw Cen MT Condensed Extra Bold", 1, 16)); // NOI18N
        jLabel3.setText("Precio costo:");

        jLabel4.setFont(new java.awt.Font("Tw Cen MT Condensed Extra Bold", 1, 16)); // NOI18N
        jLabel4.setText("Precio venta:");

        jLabel5.setFont(new java.awt.Font("Tw Cen MT Condensed Extra Bold", 1, 16)); // NOI18N
        jLabel5.setText("Unidades:");

        jLabel6.setFont(new java.awt.Font("Tw Cen MT Condensed Extra Bold", 1, 16)); // NOI18N
        jLabel6.setText("Categoria:");

        txtStock.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtStockKeyTyped(evt);
            }
        });

        txtPrecioCosto.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtPrecioCostoKeyTyped(evt);
            }
        });

        txtPrecioVenta.setEditable(false);
        txtPrecioVenta.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtPrecioVentaKeyTyped(evt);
            }
        });

        jComboBoxCategoria.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxCategoriaActionPerformed(evt);
            }
        });

        jScrollPane2.setViewportView(tablaProveedores);

        btnBuscar.setFont(new java.awt.Font("Tw Cen MT Condensed Extra Bold", 1, 16)); // NOI18N
        btnBuscar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/lupa.png"))); // NOI18N
        btnBuscar.setText("BUSCAR");
        btnBuscar.setContentAreaFilled(false);
        btnBuscar.setVerticalAlignment(javax.swing.SwingConstants.BOTTOM);
        btnBuscar.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnBuscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBuscarActionPerformed(evt);
            }
        });

        jComboBoxNivel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxNivelActionPerformed(evt);
            }
        });

        jComboBoxEstanteria.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxEstanteriaActionPerformed(evt);
            }
        });

        jLabel8.setFont(new java.awt.Font("Tw Cen MT Condensed Extra Bold", 1, 16)); // NOI18N
        jLabel8.setText("Estanteria:");

        jLabel9.setFont(new java.awt.Font("Tw Cen MT Condensed Extra Bold", 1, 16)); // NOI18N
        jLabel9.setText("Nivel:");

        txtPorcentaje.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtPorcentajeFocusLost(evt);
            }
        });
        txtPorcentaje.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtPorcentajeKeyTyped(evt);
            }
        });

        jLabel10.setFont(new java.awt.Font("Tw Cen MT Condensed Extra Bold", 1, 16)); // NOI18N
        jLabel10.setText("%");

        jLabel7.setFont(new java.awt.Font("Tw Cen MT Condensed Extra Bold", 1, 16)); // NOI18N
        jLabel7.setText("C√≥digo:");

        txtCodigo.setEditable(false);

        txtObservaciones.setColumns(20);
        txtObservaciones.setRows(5);
        txtObservaciones.setText("Sin observaciones.");
        jScrollPane3.setViewportView(txtObservaciones);

        jLabel11.setFont(new java.awt.Font("Tw Cen MT Condensed Extra Bold", 1, 16)); // NOI18N
        jLabel11.setText("Observaciones:");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 1109, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel1Layout.createSequentialGroup()
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jLabel11)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(btnCrear)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(btnActualizar)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(btnEliminar)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(btnLimpiar))
                                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(jScrollPane3, javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                            .addGap(15, 15, 15)
                                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                                        .addComponent(jLabel8)
                                                        .addComponent(jLabel9))
                                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                        .addComponent(jComboBoxNivel, 0, 202, Short.MAX_VALUE)
                                                        .addComponent(jComboBoxEstanteria, 0, 202, Short.MAX_VALUE)))
                                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addComponent(jLabel4, javax.swing.GroupLayout.Alignment.TRAILING)
                                                        .addComponent(jLabel6, javax.swing.GroupLayout.Alignment.TRAILING))
                                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                        .addComponent(jComboBoxCategoria, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                        .addComponent(txtPrecioVenta, javax.swing.GroupLayout.PREFERRED_SIZE, 201, javax.swing.GroupLayout.PREFERRED_SIZE))))))))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 780, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(jPanel1Layout.createSequentialGroup()
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(jPanel1Layout.createSequentialGroup()
                                    .addGap(10, 10, 10)
                                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addComponent(jLabel1)
                                        .addComponent(jLabel5)
                                        .addComponent(jLabel3))
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                        .addComponent(txtStock, javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                                            .addComponent(txtPrecioCosto, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addComponent(jLabel10)
                                            .addGap(6, 6, 6)
                                            .addComponent(txtPorcentaje, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addComponent(txtNombre)))
                                .addGroup(jPanel1Layout.createSequentialGroup()
                                    .addGap(46, 46, 46)
                                    .addComponent(jLabel7)
                                    .addGap(4, 4, 4)
                                    .addComponent(txtCodigo, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addComponent(btnBuscar))))
                .addGap(10, 10, 10))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(7, 7, 7)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel7)
                            .addComponent(txtCodigo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtNombre, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel1)))
                    .addComponent(btnBuscar))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtStock, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel5))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtPrecioCosto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtPorcentaje, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel10)
                            .addComponent(jLabel3))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtPrecioVenta, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel4))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel6)
                            .addComponent(jComboBoxCategoria, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jComboBoxEstanteria, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel8))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jComboBoxNivel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel9))
                        .addGap(7, 7, 7)
                        .addComponent(jLabel11)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnLimpiar, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(btnEliminar, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(btnActualizar, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addComponent(btnCrear, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addGap(4, 4, 4)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void tablaProductosMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tablaProductosMousePressed

        int fila = tablaProductos.getSelectedRow();
        int codigo = Integer.parseInt(tablaProductos.getValueAt(fila, 0).toString());
        productoSelecionado = productoControlador.findProducto(codigo);
        if(productoSelecionado == null){
            JOptionPane.showMessageDialog(this, "El producto no existe, por favor cierre la ventana y vuelva a abrirla.");
        }else{
            
            txtCodigo.setText(productoSelecionado.getCodigoProducto());
            txtNombre.setText(productoSelecionado.getNombreProducto());
            txtStock.setText(productoSelecionado.getUnidsProducto()+"");
            txtPrecioCosto.setText(productoSelecionado.getPrecioCostoProducto()+"");
            txtPorcentaje.setText(productoSelecionado.getPorcentajeProducto()+"");           
            txtPrecioVenta.setText(productoSelecionado.getPrecioVentaProducto()+"");
            if(productoSelecionado.getIdCategoria() != null){
                jComboBoxCategoria.setSelectedItem(productoSelecionado.getIdCategoria().getNombreCategoria());
            }else{
                jComboBoxCategoria.setSelectedItem("Seleccione una opci√≥n");
            }            
            jComboBoxEstanteria.setSelectedItem(productoSelecionado.getEstanteria());
            jComboBoxNivel.setSelectedItem(productoSelecionado.getNivel());
            txtObservaciones.setText(productoSelecionado.getObservaciones());
            
            btnCrear.setEnabled(false);
            btnActualizar.setEnabled(true);
            btnEliminar.setEnabled(true);
            
        }
                
    }//GEN-LAST:event_tablaProductosMousePressed

    private void btnCrearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCrearActionPerformed
        
        try {
            if("".equals(txtNombre.getText())){
                throw new Exception("Ingrese el nombre del producto, este campo es obligatorio");
            }
            
            if("".equals(txtStock.getText())){
                throw new Exception("Ingrese el stock del producto, este campo es obligatorio");
            }
            
            if("".equals(txtPrecioCosto.getText())){
                throw new Exception("Ingrese el precio de costo, este campo es obligatorio");
            }
            
            if("".equals(txtPorcentaje.getText())){
                throw new Exception("Ingrese el porcentaje, este campo es obligatorio");
            }
            
            if("".equals(txtPrecioVenta.getText())){
                throw new Exception("Ingrese el precio de venta, este campo es obligatorio");
            }
            /******************************************************************************************/
            Producto nuevoProducto = new Producto();
            nuevoProducto.setNombreProducto(txtNombre.getText());
            nuevoProducto.setPrecioCostoProducto(Integer.parseInt(txtPrecioCosto.getText()));
            nuevoProducto.setPorcentajeProducto(Double.parseDouble(txtPorcentaje.getText()));
            nuevoProducto.setPrecioVentaProducto(Integer.parseInt(txtPrecioVenta.getText()));
            nuevoProducto.setUnidsProducto(Integer.parseInt(txtStock.getText()));            
            /******************************************************************************************/            
            String c = jComboBoxCategoria.getSelectedItem().toString();
            if("Seleccione una opci√≥n".equals(c)){
                throw new Exception("Seleccione una categoria");
            }
            
            Categoria ca = categoriaControlador.consultarxNombre(c);
            if(ca == null){
                throw new Exception("La categoria, no existe");
            }
            nuevoProducto.setIdCategoria(ca);
            /******************************************************************************************/
            String estanteria = jComboBoxEstanteria.getSelectedItem()+"";
            if("Seleccione una opci√≥n".equals(estanteria)){
                throw new Exception("Seleccione una estanteria");
            }
            nuevoProducto.setEstanteria(estanteria);
            /******************************************************************************************/
            String nivel = jComboBoxNivel.getSelectedItem()+"";
            if("Seleccione una opci√≥n".equals(nivel)){
                throw new Exception("Seleccione el nivel de la estanteria");
            }
            nuevoProducto.setNivel(nivel);
            /******************************************************************************************/
            String ultimo = productoControlador.consultarUltimoCodigo();
            if(ultimo == null){
                ultimo = "0";//si no hay ninguno significa que hasta el momento no hay productos entonces el ultimo es el registrado
            }
            /******************************************************************************************/
            String trae = generarCodigo(ultimo);
            if(trae == null){
                throw new Exception("Ups algo salio mal");
            }            
            nuevoProducto.setCodigoProducto(trae);            
            //al ultimo n√∫mero le sumamos 1
            nuevoProducto.setUltimoCodigo(Integer.parseInt(ultimo)+1);
            /******************************************************************************************/
            String obse = txtObservaciones.getText();
            if("".equals(obse)){
                obse = "Sin observaciones";
            }
            nuevoProducto.setObservaciones(obse);
            /******************************************************************************************/
            //Mandar los proveedores
            int[] proveedores = tablaProveedores.getSelectedRows();
            List<Proveedor> proveedoresProducto = new ArrayList<>();
            for (int p : proveedores) {
                proveedoresProducto.add(listaProveedores.get(p));
            }
            nuevoProducto.setProveedorList(proveedoresProducto);
            /******************************************************************************************/
            productoControlador.create(nuevoProducto);            
            iconoMostrar = vistaImg.iconoExcepcion("success");
            JOptionPane.showMessageDialog(null, "El producto ha sido creado con √©xito", "MENSAJE DE INFORMACI√ìN", JOptionPane.INFORMATION_MESSAGE, iconoMostrar);
            limpiar();
            listaProducto = productoControlador.findProductoEntities();
            llenarTablaProductos();
            
        } catch (Exception e) {
            iconoMostrar = vistaImg.iconoExcepcion("error");
            JOptionPane.showMessageDialog(null, e.getMessage(), "ERROR", JOptionPane.INFORMATION_MESSAGE, iconoMostrar); 
        }
        
    }//GEN-LAST:event_btnCrearActionPerformed

    private void btnLimpiarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLimpiarActionPerformed
        limpiar();
    }//GEN-LAST:event_btnLimpiarActionPerformed

    private void jComboBoxCategoriaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxCategoriaActionPerformed
        
        try {
            // si el usuario escoje otra categoria la vamos a registrar
            String categoria = jComboBoxCategoria.getSelectedItem().toString();
            String nueva = "";
            if (categoria.equals("OTRA")) {
                Categoria nuevaCategoria = new Categoria();
                nueva = JOptionPane.showInputDialog("Ingrese el nombre");
                Categoria categoriaBuscado = categoriaControlador.consultarxNombre(nueva);
                if(categoriaBuscado != null){
                    jComboBoxCategoria.setSelectedIndex(0);
                    throw new Exception("Ya hay una categoria con ese nombre");
                }
                nuevaCategoria.setNombreCategoria(nueva);
                categoriaControlador.create(nuevaCategoria);
                actualizarComboBox();
            }
        } catch (Exception e) {
            iconoMostrar = vistaImg.iconoExcepcion("error");
            JOptionPane.showMessageDialog(null, e.getMessage(), "MENSAJE DE INFORMACI√ìN", JOptionPane.INFORMATION_MESSAGE, iconoMostrar);
        }        

    }//GEN-LAST:event_jComboBoxCategoriaActionPerformed

    private void txtStockKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtStockKeyTyped
        
        char c = evt.getKeyChar();

        if (c < '0' || c > '9') {
            evt.consume();//esto es para que solo pueda ingresar numeros
        }
        
    }//GEN-LAST:event_txtStockKeyTyped

    private void txtPrecioCostoKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtPrecioCostoKeyTyped
        
        char c = evt.getKeyChar();

        if (c < '0' || c > '9') {
            evt.consume();//esto es para que solo pueda ingresar numeros
        }
        
    }//GEN-LAST:event_txtPrecioCostoKeyTyped

    private void txtPrecioVentaKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtPrecioVentaKeyTyped
        
        char c = evt.getKeyChar();

        if (c < '0' || c > '9') {
            evt.consume();//esto es para que solo pueda ingresar numeros
        }
        
    }//GEN-LAST:event_txtPrecioVentaKeyTyped

    private void btnEliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEliminarActionPerformed
        
        iconoMostrar = vistaImg.iconoExcepcion("pregunta");
        int quiere = JOptionPane.showConfirmDialog(null, "¬øEst√° seguro?", "ELIGE UNA OPCI√ìN", 0, HEIGHT, iconoMostrar);
        switch (quiere) {
            case 0:
                try {
                    
                    List<Producto> productoConProveedor = proveedorControlador.preguntarProductos(productoSelecionado);
                    if(!productoConProveedor.isEmpty()){
                        throw new Exception("El producto tiene asignado un proveedor y por seguridad no es posible eliminarlo");
                    }
                    productoControlador.destroy(productoSelecionado.getIdProducto());
                    iconoMostrar = vistaImg.iconoExcepcion("success");
                    JOptionPane.showMessageDialog(null, "El producto ha sido eliminado con √©xito", "MENSAJE DE INFORMACI√ìN", JOptionPane.INFORMATION_MESSAGE, iconoMostrar);
                    limpiar();
                    listaProducto = productoControlador.findProductoEntities();
                    llenarTablaProductos();
                } catch (Exception e) {
                    iconoMostrar = vistaImg.iconoExcepcion("error");
                    JOptionPane.showMessageDialog(null, e.getMessage(),"ERROR", JOptionPane.ERROR_MESSAGE, iconoMostrar);
                } break;
            case 1:
                //no
                break;
            default:
                break;
        }
        
    }//GEN-LAST:event_btnEliminarActionPerformed

    private void btnActualizarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnActualizarActionPerformed
        
        try {
            
            if("".equals(txtNombre.getText())){
                throw new Exception("Ingrese el nombre del producto, este campo es obligatorio");
            }
            
            if("".equals(txtStock.getText())){
                throw new Exception("Ingrese el stock del producto, este campo es obligatorio");
            }
            
            if("".equals(txtPrecioCosto.getText())){
                throw new Exception("Ingrese el precio de costo, este campo es obligatorio");
            }
            
            if("".equals(txtPorcentaje.getText())){
                throw new Exception("Ingrese el porcentaje, este campo es obligatorio");
            }
            
            if("".equals(txtPrecioVenta.getText())){
                throw new Exception("Ingrese el precio de venta, este campo es obligatorio");
            }
            /******************************************************************************************/
            productoSelecionado.setNombreProducto(txtNombre.getText());
            productoSelecionado.setPrecioCostoProducto(Integer.parseInt(txtPrecioCosto.getText()));
            productoSelecionado.setPorcentajeProducto(Double.parseDouble(txtPorcentaje.getText()));
            productoSelecionado.setPrecioVentaProducto(Integer.parseInt(txtPrecioVenta.getText()));
            productoSelecionado.setUnidsProducto(Integer.parseInt(txtStock.getText()));            
            /******************************************************************************************/            
            String c = jComboBoxCategoria.getSelectedItem().toString();
            if("Seleccione una opci√≥n".equals(c)){
                throw new Exception("Seleccione una categoria");
            }
            
            Categoria ca = categoriaControlador.consultarxNombre(c);
            if(ca == null){
                throw new Exception("La categoria, no existe");
            }
            productoSelecionado.setIdCategoria(ca);
            /******************************************************************************************/
            String estanteria = jComboBoxEstanteria.getSelectedItem()+"";
            if("Seleccione una opci√≥n".equals(estanteria)){
                throw new Exception("Seleccione una estanteria");
            }
            productoSelecionado.setEstanteria(estanteria);
            /******************************************************************************************/
            String nivel = jComboBoxNivel.getSelectedItem()+"";
            if("Seleccione una opci√≥n".equals(nivel)){
                throw new Exception("Seleccione el nivel de la estanteria");
            }
            productoSelecionado.setNivel(nivel);
            /******************************************************************************************/
            String obse = txtObservaciones.getText();
            if("".equals(obse)){
                obse = "Sin observaciones";
            }
            productoSelecionado.setObservaciones(obse);
            /******************************************************************************************/
            //Mandar los proveedores
            int[] proveedores = tablaProveedores.getSelectedRows();
            List<Proveedor> proveedoresProducto = new ArrayList<>();
            for (int p : proveedores) {
                proveedoresProducto.add(listaProveedores.get(p));
            }
            productoSelecionado.setProveedorList(proveedoresProducto);
            /******************************************************************************************/
            productoControlador.edit(productoSelecionado);            
            iconoMostrar = vistaImg.iconoExcepcion("success");
            JOptionPane.showMessageDialog(null, "El producto ha sido actualizado con √©xito", "MENSAJE DE INFORMACI√ìN", JOptionPane.INFORMATION_MESSAGE, iconoMostrar);
            limpiar();
            listaProducto = productoControlador.findProductoEntities();
            llenarTablaProductos();
            
        } catch (Exception e) {
            iconoMostrar = vistaImg.iconoExcepcion("error");
            JOptionPane.showMessageDialog(null, e.getMessage(), "ERROR", JOptionPane.INFORMATION_MESSAGE, iconoMostrar); 
        }
        
    }//GEN-LAST:event_btnActualizarActionPerformed

    private void btnBuscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBuscarActionPerformed
        
        try {
            String nombre = txtNombre.getText();
            if("".equals(nombre)){
                throw new Exception("Por favor ingrese el nombre del producto");
            }
            listaProducto = productoControlador.consultaxNombre(nombre);
            if(listaProducto == null){
                throw new Exception("No hay resultados, verifique que el nombre sea correcto");
            }
            llenarTablaProductos();
        } catch (Exception e) {
            iconoMostrar = vistaImg.iconoExcepcion("error");
            JOptionPane.showMessageDialog(null, e.getMessage(), "ERROR", JOptionPane.INFORMATION_MESSAGE, iconoMostrar);
        }
                
    }//GEN-LAST:event_btnBuscarActionPerformed

    private void jComboBoxEstanteriaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxEstanteriaActionPerformed
        
        String nombre = jComboBoxEstanteria.getSelectedItem().toString();
        
        if(nombre.equals("OTRA")){
            String nueva = JOptionPane.showInputDialog("Ingrese el nombre o c√≥digo de la estanteria").toUpperCase();
            comboBoxEstanteria();
            jComboBoxEstanteria.addItem(nueva);
            jComboBoxEstanteria.setSelectedItem(nueva);
        }
        
    }//GEN-LAST:event_jComboBoxEstanteriaActionPerformed

    private void jComboBoxNivelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxNivelActionPerformed
        
        String nombre = jComboBoxNivel.getSelectedItem().toString();
        
        if(nombre.equals("OTRA")){
            String nueva = JOptionPane.showInputDialog("Ingrese el nivel").toUpperCase();
            comboBoxNivel();
            jComboBoxNivel.addItem(nueva);
            jComboBoxNivel.setSelectedItem(nueva);
        }
        
    }//GEN-LAST:event_jComboBoxNivelActionPerformed

    private void txtPorcentajeFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtPorcentajeFocusLost
        
        try{
                        
            if("".equals(txtPrecioCosto.getText())){                
                throw new Exception("El costo del producto no puede ir vacio");                                
            }
            
            if("".equals(txtPorcentaje.getText())){                
                throw new Exception("El porcentaje no puede ir vacio");                                
            }
                
            Double por = Double.parseDouble(txtPorcentaje.getText());

            if(por < 0 || por > 1000){
                throw new Exception("Solo se permite n√∫meros");
            }

            calcularGanancia(por);
                        
        } catch (Exception e) {
            iconoMostrar = vistaImg.iconoExcepcion("error");
            JOptionPane.showMessageDialog(null, e.getMessage(), "MENSAJE DE INFORMACI√ìN", JOptionPane.INFORMATION_MESSAGE, iconoMostrar);
        }
        
    }//GEN-LAST:event_txtPorcentajeFocusLost

    private void txtPorcentajeKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtPorcentajeKeyTyped
        
        char c = evt.getKeyChar();

        if ((c < '0' || c > '9') & ((c<'.') || c>'.')) {
            evt.consume();//esto es para que solo pueda ingresar n√∫meros
        }
        
    }//GEN-LAST:event_txtPorcentajeKeyTyped

    private void limpiar(){
        
        txtCodigo.setText("");
        txtNombre.setText("");
        txtStock.setText("");
        txtPrecioCosto.setText("");
        txtPorcentaje.setText("");
        txtPrecioVenta.setText("");
        jComboBoxCategoria.setSelectedIndex(0);
        jComboBoxEstanteria.setSelectedIndex(0);
        jComboBoxNivel.setSelectedIndex(0);
        txtObservaciones.setText("");
        
        btnCrear.setEnabled(true);
        btnActualizar.setEnabled(false);
        btnEliminar.setEnabled(false);
                
    }
    
    public void actualizarComboBox(){
        //llenar el combo box de las categorias registradas
        jComboBoxCategoria.removeAllItems();
        List<String> datos = categoriaControlador.distincxcategoria();
        jComboBoxCategoria.addItem("Seleccione una opci√≥n");
        for (String c : datos) {
            jComboBoxCategoria.addItem(c);
        }
        if(logueado.getTipoUsuario().equals("ADMINISTRADOR")){
            jComboBoxCategoria.addItem("OTRA");
        }
    }
    
    public void comboBoxEstanteria(){
        //llenar el combo box con la estanteria
        jComboBoxEstanteria.removeAllItems();
        List<String> datos = productoControlador.consultarEstanteria();
        jComboBoxEstanteria.addItem("Seleccione una opci√≥n");
        for (String p : datos) {
            jComboBoxEstanteria.addItem(p);            
        }
        if(logueado.getTipoUsuario().equals("ADMINISTRADOR")){
            jComboBoxEstanteria.addItem("OTRA");
        }
    }
    
    public void comboBoxNivel(){
        //llenar el combo box con el nivel de la estanteria
        jComboBoxNivel.removeAllItems();
        List<String> datos = productoControlador.consultarNivel();
        jComboBoxNivel.addItem("Seleccione una opci√≥n");
        for (String p : datos) {
            jComboBoxNivel.addItem(p);            
        }
        if(logueado.getTipoUsuario().equals("ADMINISTRADOR")){
            jComboBoxNivel.addItem("OTRA");
        }
    }
    
    public void llenarTablaProveedor(){
        
        DefaultTableModel modelo = new DefaultTableModel();
        listaProveedores = proveedorControlador.findProveedorEntities();
        
        modelo.addColumn("Nit");
        modelo.addColumn("Nombre");
        modelo.addColumn("Tel√©fono");
        modelo.addColumn("Correo");
        String[] datos = new String[4];
        for (Proveedor p : listaProveedores){
            datos[0] = p.getNitProveedor()+"";
            datos[1] = p.getNombreProveedor();
            datos[2] = p.getTelefonoProveedor();
            datos[3] = p.getCorreoProveedor();
            modelo.addRow(datos);
        }
        tablaProveedores.setModel(modelo);
        
    }
    
    public void llenarTablaProductos(){
                
        DefaultTableModel modelo = new DefaultTableModel();
        modelo.addColumn("Id");
        modelo.addColumn("C√≥digo");
        modelo.addColumn("Nombre");            
        modelo.addColumn("Precio costo");
        modelo.addColumn("Porcentaje");
        modelo.addColumn("Precio venta");
        modelo.addColumn("Unidades");
        modelo.addColumn("Categor√≠a");
        modelo.addColumn("Nivel");
        modelo.addColumn("Estanteria");                        
        modelo.addColumn("Observaciones");
        String[] datos = new String[11];
        for (Producto p : listaProducto) {
            datos[0] = p.getIdProducto()+"";
            datos[1] = p.getCodigoProducto();
            datos[2] = p.getNombreProducto();
            datos[3] = p.getPrecioCostoProducto()+"";
            datos[4] = p.getPorcentajeProducto()+"";
            datos[5] = p.getPrecioVentaProducto()+"";
            datos[6] = p.getUnidsProducto()+"";
            if(p.getIdCategoria() != null){
                datos[7] = p.getIdCategoria().getNombreCategoria();
            }else{
                datos[7] = null;
            }         
            datos[8] = p.getNivel();
            datos[9] = p.getEstanteria();
            datos[10] = p.getObservaciones();
            modelo.addRow(datos);
        }        
        tablaProductos.setModel(modelo);        
    }
    
    public void calcularGanancia(Double porci){
                
        Double costo = Double.parseDouble(txtPrecioCosto.getText());
        DecimalFormat df = new DecimalFormat("#.00");
        
        if(porci >= 100){
            //se multiplica el costo por el porcentaje y se divide en 100 luego sumamos al costo, para el resultado final            
            Double porcentaje = Double.parseDouble(txtPorcentaje.getText());
            Double costoPorcentaje = ((costo*porcentaje)/100)+costo;            
            txtPrecioVenta.setText(Math.round(costoPorcentaje)+"");
        }else{
            //Se resta el porcentaje ingresado(100-porci) y se guarda en esta varible--> porcentaje
            //Se divide el costo por el porcentaje restado y se multiplica por 100
            Double porcentaje = (100-porci)/100;
            Double costoPorcentaje = costo/porcentaje;
            txtPrecioVenta.setText(Math.round(costoPorcentaje)+"");
        }
            
    }
    
    public String generarCodigo(String ultimo){
        try{            
            String sTexto, sPalabra, a, codigo, codFinal;
            sTexto = txtNombre.getText();
            StringTokenizer stPalabras = new StringTokenizer(sTexto);
            sPalabra = stPalabras.nextToken();
            a = sPalabra.substring(0,1);
            codigo = jComboBoxEstanteria.getSelectedItem()+a.toUpperCase();
            //le sumamos 1 al ultimo c√≥digo
            int buscado = Integer.parseInt(ultimo)+1;
            codFinal = codigo + buscado;
            //Retornamos el c√≥digo
            return codFinal;            
        }catch(Exception e){
            return null;
        }
        
    }
                
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(VistaProductos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(VistaProductos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(VistaProductos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(VistaProductos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                VistaProductos dialog = new VistaProductos(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnActualizar;
    private javax.swing.JButton btnBuscar;
    private javax.swing.JButton btnCrear;
    private javax.swing.JButton btnEliminar;
    private javax.swing.JButton btnLimpiar;
    private javax.swing.JComboBox<String> jComboBoxCategoria;
    private javax.swing.JComboBox<String> jComboBoxEstanteria;
    private javax.swing.JComboBox<String> jComboBoxNivel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTable tablaProductos;
    private javax.swing.JTable tablaProveedores;
    private javax.swing.JTextField txtCodigo;
    private javax.swing.JTextField txtNombre;
    private javax.swing.JTextArea txtObservaciones;
    private javax.swing.JTextField txtPorcentaje;
    private javax.swing.JTextField txtPrecioCosto;
    private javax.swing.JTextField txtPrecioVenta;
    private javax.swing.JTextField txtStock;
    // End of variables declaration//GEN-END:variables
}
